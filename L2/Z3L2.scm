(define (splot . lists)
  (fold-right (lambda (xs ys)
                (product xs ys))
              '(())
              lists))
			    
(define (product xs ys)
	(apply append (map (lambda (x)
								(map (lambda (y)
                                     (cons x y))
									ys))
								xs)))

(display "\n(splot) => ")
(display (splot))
(display "\n(splot '(1 2 3)) => ")
(display (splot '(1 2 3)))
(display "\n(splot '(1 2) '(3 4)) => ")
(display (splot '(1 2) '(3 4)))
(display "\n(splot '(1 2) '(3 4) '(5 6)) => ")
(display (splot '(1 2) '(3 4) '(5 6)))
(display "\n(splot '(1 2) () '(5 6)) => ")
(display (splot '(1 2) () '(5 6)))
(display "\n")
