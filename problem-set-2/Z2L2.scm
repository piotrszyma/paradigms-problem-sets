(define (pochodna wyr zm)
	(if (list? wyr)
		(cond 
			((equal? (op wyr) '+) 
			(list (pochodna (first-arg wyr) zm) '+ (pochodna (sec-arg wyr) zm))
			)
			((equal? (op wyr) '-)
			(list (pochodna (first-arg wyr) zm) '- (pochodna (sec-arg wyr) zm))
			)
			((equal? (op wyr) '*) 
			(list (list (pochodna (first-arg wyr) zm) '* (sec-arg wyr)) '+ (list (first-arg wyr) '* (pochodna (sec-arg wyr) zm)))
			)
			((equal? (op wyr) '/) 
			(list (list (list (pochodna (first-arg wyr) zm) '* (sec-arg wyr)) '- (list (first-arg wyr) '* (pochodna (sec-arg wyr) zm))) '/ (list (sec-arg wyr) '* (sec-arg wyr)))
			)
			(else #f)
		)
		(if (equal? wyr zm)
			1
			0)))
			
(define (op ls)
	(car (cdr ls)))
	
(define (first-arg ls)
	(car ls))
	
(define (sec-arg ls)
	(car (cdr (cdr ls))))
	
(display "\n(pochodna 'x 'x) => ")
(display (pochodna 'x 'x))
(display "\n(pochodna 'x 'x) => ")
(display (pochodna 'y 'x))
(display "\n(pochodna '(x + y) 'x) => ")
(display (pochodna '(x + y) 'x))
(display "\n(pochodna '(x * y) 'x) => ")
(display (pochodna '(x * y) 'x))
(display "\n(pochodna '(x / y) 'x) => ")
(display (pochodna '(x / y) 'x))
(display "\n(pochodna '((x + a) * (x + b)) 'x) => ")
(display (pochodna '((x + a) * (x + b)) 'x))
(display "\n")
